> from .models import QuizCategory, Quiz, Question, Score, Answer
> from .score import GetScore
  
  
> class PlayQuiz:
  
>     @staticmethod
>     def update_score(request):
>         question = Question.objects.get(id=request.POST.get('last_question'))
>         score = Score.objects.get(question=question, user=request.user)
>         if score.answered is False:
>             if request.POST.get('answer') == question.correct_answer:
>                 score.correct = 1
>                 score.answered = True
>                 score.save()
!             else:
!                 score.answered = True
!                 score.save()
  
>     @staticmethod
>     def get_questions(request, quiz, questions):
>         question = None
>         last_question = None
>         for q in questions:
>             last_question = question
>             question = q
>             s, c = Score.objects.get_or_create(user=request.user, quiz=quiz, question=question)
>             if c or s.answered is False:
>                 break
>         return question, last_question
  
>     @staticmethod
>     def get_question_count(quiz, request):
>         scores = Score.objects.filter(quiz=quiz, user=request.user)
>         score_count = 0
>         for s in scores:
>             if s.answered is True:
>                 score_count += 1
>         return score_count
  
>     @staticmethod
>     def get_response(last_question, user):
>         response = None
>         if last_question:
>             score = Score.objects.get(question=last_question, user=user)
>             if score.correct == 1:
>                 response = "Correct!!"
!             else:
!                 response = "Incorrect, the answer was: " + last_question.correct_answer
  
>         return response
  
>     @staticmethod
>     def check_if_last_question(question_count, request, quiz, response, question, answers, questions_length):
>         if question_count == questions_length:
!             score = GetScore([request.user], [quiz]).get_scores()
!             return 'quiz/final_score.html', {"score": score[0]["Scores"][0]["Score"], "response": response}
>         else:
>             return 'quiz/quiz_detail.html', {"quiz": quiz,
>                                              "question": question,
>                                              "answers": answers,
>                                              "response": response,
>                                              "number": (question_count + 1)}
